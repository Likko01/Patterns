namespace AbstractFabric
{
    internal class Program
    {
        static void Main(string[] args)
        {
            
        }
    }
}
using AbstractFabric.Product.BlueUnits;
using AbstractFabric.Product.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Fabric
{
    class BlueFabric : IAbstractFactory
    {
        public IKnight CreateKnight()
        {
            return new BlueKnight();
        }
        public IWizard CreateWizard()
        {
            return new BlueWizard();
        }
    }
}
using AbstractFabric.Product.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Fabric
{
    interface IAbstractFactory
    {
        public IKnight CreateKnight();
        public IWizard CreateWizard();
    }
}
using AbstractFabric.Product.Interface;
using AbstractFabric.Product.RedUnits;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Fabric
{
    class RedFactory : IAbstractFactory
    {
        public IKnight CreateKnight()
        {
            return new RedKnight();
        }

        public IWizard CreateWizard()
        {
            return new RedWizard();
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("AbstractFabric")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("AbstractFabric")]
[assembly: System.Reflection.AssemblyTitleAttribute("AbstractFabric")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using AbstractFabric.Product.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.BlueUnits
{
    class BlueKnight : IKnight
    {
        public int damage { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public int health { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public void Attack()
        {
            throw new NotImplementedException();
        }
    }
}
using AbstractFabric.Product.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.BlueUnits
{
    class BlueWizard : IWizard
    {
        public int damage { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public int health { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public void CastSpell()
        {
            throw new NotImplementedException();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.Interface
{
    interface IKnight: IUnit
    {
        void Attack();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.Interface
{
    interface IUnit
    {
        int damage { get; set; }
        int health { get; set; }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.Interface
{
    interface IWizard: IUnit
    {
        void CastSpell();
    }
}
using AbstractFabric.Product.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.RedUnits
{
    class RedKnight : IKnight
    {
        public int damage { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public int health { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public void Attack()
        {
            throw new NotImplementedException();
        }
    }
}
using AbstractFabric.Product.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFabric.Product.RedUnits
{
    class RedWizard : IWizard
    {
        public int damage { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public int health { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public void CastSpell()
        {
            throw new NotImplementedException();
        }
    }
}
using Builder.Builders;
using Builder.Product.Engines;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder
{
    class director
    {
        public void ConstructSportsCar(IBuilder builder)
        {
            builder.Reset();
            builder.SetSeats(2);
            builder.SetEngine(new SportEngine());
            builder.SetTripComputer(true);
            builder.SetGPS(true);
        }

        public void ConstructCityCar(IBuilder builder)
        {
            builder.Reset();
            builder.SetSeats(4);
            builder.SetEngine(new CityEngine());
            builder.SetTripComputer(true);
            builder.SetGPS(false);
        }
    }
}
namespace Builder
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
using Builder.Product;
using Builder.Product.Engines;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Builders
{
    class CarBuilder : IBuilder
    {
        private Car car = new Car();

        public void Reset()
        {
            car = new Car();
        }

        public void SetEngine(IEngine engine)
        {
            car.Engine = engine;
        }

        public void SetGPS(bool hasGPS)
        {
            car.HasGPS = hasGPS;
        }

        public void SetSeats(int number)
        {
            car.Seats = number;
        }

        public void SetTripComputer(bool hasComputer)
        {
            car.HasTripComputer = hasComputer;

        }
        public Car GetResult()
        {
            return car;
        }
    }
}
using Builder.Product;
using Builder.Product.Engines;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Builders
{
    class CarManualBuilder : IBuilder
    {
        private CarManual carManual = new CarManual ();

        public void Reset()
        {
            carManual = new CarManual();
        }

        public void SetEngine(IEngine engine)
        {
            carManual.Content += $"Engine: {engine.GetType().Name}\n";
        }

        public void SetGPS(bool hasGPS)
        {
            carManual.Content += $"GPS: {hasGPS}\n";
        }

        public void SetSeats(int number)
        {
            carManual.Content += $"Seats: {number}\n";
        }

        public void SetTripComputer(bool hasComputer)
        {
            carManual.Content += $"TripComputer: {hasComputer}\n";
        }
        public CarManual GetResult()
        {
            return carManual;
        }
    }
}
using Builder.Product.Engines;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Builders
{
    interface IBuilder
    {
        void Reset();
        void SetSeats(int number);
        void SetEngine(IEngine engine);
        void SetTripComputer(bool hasComputer);
        void SetGPS(bool hasGPS);
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Builder")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Builder")]
[assembly: System.Reflection.AssemblyTitleAttribute("Builder")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("NaiveDirector")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("NaiveDirector")]
[assembly: System.Reflection.AssemblyTitleAttribute("NaiveDirector")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using Builder.Product.Engines;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Product
{
    class Car
    {
        public int Seats { get; set; }
        public IEngine Engine { get; set; }
        public bool HasTripComputer { get; set; }
        public bool HasGPS { get; set; }

        public override string ToString()
        {
            return $"Car: Seats={Seats}, Engine={Engine.Type} ({Engine.HorsePower} HP), " +
                   $"TripComputer={HasTripComputer}, GPS={HasGPS}";
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Product
{
    class CarManual
    {
        public string Content { get; set; } = "";

        public override string ToString()
        {
            return $"Manual:\n{Content}";
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Product.Engines
{
    class CityEngine : IEngine
    {
        public int HorsePower => 120;
        public string Type => "City Engine";

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Product.Engines
{
    interface IEngine
    {
        int HorsePower { get; }
        string Type { get; }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Builder.Product.Engines
{
    class SportEngine : IEngine
    {
        public int HorsePower => 400;
        public string Type => "Sport Engine";
    }
}
using Factory.Fabrics;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            NotificationFactory factory;

            factory = new EmailNotificationFactory();
            var email = factory.CreateNotification();
            email.Send("Hello via Email!");

            factory = new SmsNotificationFactory();
            var sms = factory.CreateNotification();
            sms.Send("Hello via SMS!");

        }
    }
}
using ConsoleApp1.Notifications;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Factory.Fabrics
{
    public class EmailNotificationFactory : NotificationFactory
    {
        public override INotification CreateNotification() => new EmailNotification();
    }

}
using ConsoleApp1.Notifications;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Factory.Fabrics
{
    public abstract class NotificationFactory
    {
        public abstract INotification CreateNotification();
    }
}
using ConsoleApp1.Notifications;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Factory.Fabrics
{
    public class SmsNotificationFactory : NotificationFactory
    {
        public override INotification CreateNotification() => new SmsNotification();
    }

}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ConsoleApp1")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("ConsoleApp1")]
[assembly: System.Reflection.AssemblyTitleAttribute("ConsoleApp1")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Factory")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Factory")]
[assembly: System.Reflection.AssemblyTitleAttribute("Factory")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1.Notifications
{
    public class EmailNotification : INotification
    {
        public void Send(string message)
        {
            Console.WriteLine($"[Email] {message}");
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1.Notifications
{
    public interface INotification
    {
        void Send(string message);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1.Notifications
{
    public class SmsNotification : INotification
    {
        public void Send(string message)
        {
            Console.WriteLine($"[SMS] {message}");
        }
    }
}
namespace Patterns
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Patterns")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Patterns")]
[assembly: System.Reflection.AssemblyTitleAttribute("Patterns")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prototipe
{
    class Circle : Shape
    {
        public int Radius { get; set; }
        public Circle() { }
        public Circle(Circle source) : base(source)
        {
            this.Radius = source.Radius;
        }
        public override Shape Clone()
        {
            return new Circle(this);
        }
    }
}
using Prototipe.Client;

namespace Prototipe
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var app = new Application();
            app.BusinessLogic();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prototipe
{
    class Rectangle : Shape
    {
        public int width { get; set; }
        public int height { get; set; }
            
        public Rectangle() { }
        public Rectangle(Rectangle source) : base (source)
        {
            this.width = source.width;
            this.height = source.height;
        }

        public override Shape Clone()
        {
            return new Rectangle(this);
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prototipe
{
    abstract class Shape
    {
        public int X { get; set; }
        public int Y { get; set; }
        public string Color { get; set; }

        public Shape() { }

        public Shape(Shape source)
        {
            if (source != null)
            {
                this.X = source.X;
                this.Y = source.Y;
                this.Color = source.Color;
            }
        }

        public abstract Shape Clone();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prototipe.Client
{
    class Application
    {
        private List<Shape> shapes = new List<Shape>();
        public Application()
        {
            var circle = new Circle { X = 10, Y = 10, Radius = 20, Color = "Red"};
            shapes.Add(circle);

            var anotherCircle = circle.Clone();
            shapes.Add(anotherCircle);

            var rectangle = new Rectangle { width = 10, height = 20, Color = "Blue" };
            shapes.Add(rectangle);
        }
        public void BusinessLogic()
        {
            var shapesCopy = new List<Shape>();
            foreach (var s in shapes)
            {
                shapesCopy.Add(s.Clone());
            }
            Console.WriteLine("Original count: " + shapes.Count);
            Console.WriteLine("Copy count: " + shapesCopy.Count);
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Prototipe")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Prototipe")]
[assembly: System.Reflection.AssemblyTitleAttribute("Prototipe")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Singletone
{
    class Logger
    {
        private static readonly Lazy<Logger> instance = 
            new Lazy<Logger>(() => new Logger());
        private readonly string logFilePath = "log.txt";
        private Logger()
        {
            // Initialize log file or other resources if needed
        }

        public static Logger Instance => instance.Value;

        public void Log(string message)
        {
            string logEntry = $"{DateTime.Now}: {message}";
            Console.WriteLine(logEntry);
            File.AppendAllText(logFilePath, logEntry + Environment.NewLine);
        }
    }
}
namespace Singletone
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var logger1 = Logger.Instance;
            var logger2 = Logger.Instance;

            logger1.Log("Программа запущена");
            logger2.Log("Пользователь вошёл в систему");

            Console.WriteLine(Object.ReferenceEquals(logger1, logger2) );
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Singletone")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Singletone")]
[assembly: System.Reflection.AssemblyTitleAttribute("Singletone")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
